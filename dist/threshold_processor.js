System.register([], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    function getWorstSeries(series1, series2) {
        var worstSeries = series1;
        var series1Value = getValueByStatName(series1.operatorName, series1);
        var series2Value = getValueByStatName(series2.operatorName, series2);
        var series1result = getThresholdLevelForValue(series1.thresholds, series1Value);
        var series2result = getThresholdLevelForValue(series2.thresholds, series2Value);
        if (series2result.thresholdLevel > series1result.thresholdLevel) {
            worstSeries = series2;
        }
        if (series1result.thresholdLevel === 3) {
            switch (series2result.thresholdLevel) {
                case 1:
                    worstSeries = series2;
                    break;
                case 2:
                    worstSeries = series2;
                    break;
            }
        }
        return worstSeries;
    }
    exports_1("getWorstSeries", getWorstSeries);
    function getThresholdLevelForValue(thresholds, value) {
        var colorGrey = "#808080";
        var colorWhite = "#FFFFFF";
        var currentColor = colorWhite;
        if (value === null) {
            return { thresholdLevel: 3, color: colorGrey };
        }
        var currentState = -1;
        if (typeof thresholds === "undefined") {
            return { thresholdLevel: currentState, color: colorWhite };
        }
        var thresholdCount = thresholds.length;
        if (thresholdCount === 0) {
            return { thresholdLevel: currentState, color: colorWhite };
        }
        var aThreshold = thresholds[thresholdCount - 1];
        if (value >= aThreshold.value) {
            currentState = aThreshold.state;
            currentColor = aThreshold.color;
        }
        if (thresholds.length === 1) {
            return { thresholdLevel: currentState, color: currentColor };
        }
        for (var i = thresholdCount - 1; i > 0; i--) {
            var upperThreshold = thresholds[i];
            var lowerThreshold = thresholds[i - 1];
            if ((lowerThreshold.value <= value) && (value < upperThreshold.value)) {
                if (currentState < lowerThreshold.state) {
                    currentState = lowerThreshold.state;
                    currentColor = lowerThreshold.color;
                }
            }
        }
        if (currentState === -1) {
            currentState = thresholds[0].state;
            currentColor = thresholds[0].color;
        }
        return { thresholdLevel: currentState, color: currentColor };
    }
    exports_1("getThresholdLevelForValue", getThresholdLevelForValue);
    function getValueByStatName(operatorName, data) {
        var value = data.stats.avg;
        switch (operatorName) {
            case "avg":
                value = data.stats.avg;
                break;
            case "count":
                value = data.stats.count;
                break;
            case "current":
                value = data.stats.current;
                break;
            case "delta":
                value = data.stats.delta;
                break;
            case "diff":
                value = data.stats.diff;
                break;
            case "first":
                value = data.stats.first;
                break;
            case "logmin":
                value = data.stats.logmin;
                break;
            case "max":
                value = data.stats.max;
                break;
            case "min":
                value = data.stats.min;
                break;
            case "name":
                value = data.metricName;
                break;
            case "time_step":
                value = data.stats.timeStep;
                break;
            case "last_time":
                value = data.timestamp;
                break;
            case "total":
                value = data.stats.total;
                break;
            default:
                value = data.stats.avg;
                break;
        }
        return value;
    }
    exports_1("getValueByStatName", getValueByStatName);
    return {
        setters: [],
        execute: function () {
        }
    };
});
//# sourceMappingURL=data:application/json;base64,