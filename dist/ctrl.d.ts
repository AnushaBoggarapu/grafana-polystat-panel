import { MetricsPanelCtrl } from "app/plugins/sdk";
import "./css/polystat.css!";
import { D3Wrapper } from "./d3wrapper";
import { PolystatModel } from "./polystatmodel";
import { MetricOverridesManager } from "./metric_overrides_manager";
import { CompositesManager } from "./composites_manager";
declare class D3PolystatPanelCtrl extends MetricsPanelCtrl {
    private $sanitize;
    static templateUrl: string;
    panelDefaults: {
        animationModes: {
            value: string;
            text: string;
        }[];
        displayModes: {
            value: string;
            text: string;
        }[];
        thresholdStates: {
            value: number;
            text: string;
        }[];
        shapes: {
            value: string;
            text: string;
        }[];
        savedComposites: any[];
        savedOverrides: any[];
        fontSizes: number[];
        fontTypes: string[];
        unitFormats: any;
        operatorOptions: {
            value: string;
            text: string;
        }[];
        operatorName: string;
        colors: string[];
        notcolors: string[];
        decimals: number;
        format: string;
        sortDirections: {
            value: string;
            text: string;
        }[];
        sortFields: {
            value: string;
            text: string;
        }[];
        polystat: {
            shape: string;
            globalDisplayMode: string;
            globalOperatorName: string;
            rows: string;
            rowAutoSize: boolean;
            columns: string;
            columnAutoSize: boolean;
            displayLimit: number;
            maxMetrics: number;
            radius: string;
            radiusAutoSize: boolean;
            tooltipFontSize: number;
            tooltipFontType: string;
            animationSpeed: number;
            defaultClickThrough: string;
            defaultClickThroughSanitize: boolean;
            hexagonSortByDirection: string;
            hexagonSortByField: string;
            tooltipDisplayMode: string;
            tooltipDisplayTextTriggeredEmpty: string;
            tooltipPrimarySortDirection: string;
            tooltipPrimarySortField: string;
            tooltipSecondarySortDirection: string;
            tooltipSecondarySortField: string;
            tooltipTimestampEnabled: boolean;
            fontSize: number;
            fontAutoScale: boolean;
            gradientEnabled: boolean;
        };
    };
    dataRaw: any;
    polystatData: PolystatModel[];
    containerDivId: any;
    scoperef: any;
    alertSrvRef: any;
    initialized: boolean;
    panelContainer: any;
    panelWidth: any;
    panelHeight: any;
    d3Object: D3Wrapper;
    data: any;
    series: any[];
    templateSrv: any;
    overridesCtrl: MetricOverridesManager;
    compositesManager: CompositesManager;
    tooltipContent: string[];
    constructor($scope: any, $injector: any, templateSrv: any, alertSrv: any, $sanitize: any);
    onInitEditMode(): void;
    setContainer(container: any): void;
    getPanelWidthFailsafe(): number;
    getPanelHeight(): number;
    clearSVG(): void;
    renderD3(): void;
    removeValueMap(map: any): void;
    addValueMap(): void;
    removeRangeMap(rangeMap: any): void;
    addRangeMap(): void;
    link(scope: any, elem: any, attrs: any, ctrl: any): void;
    setValues(dataList: any): void;
    filterByGlobalDisplayMode(data: any): any;
    onDataError(err: any): void;
    onDataReceived(dataList: any): void;
    seriesHandler(seriesData: any): any;
    invertColorOrder(): void;
    validateAnimationSpeed(): void;
    validateColumnValue(): void;
    validateRowValue(): void;
    validateRadiusValue(): void;
    getDefaultClickThrough(): any;
}
export { D3PolystatPanelCtrl, D3PolystatPanelCtrl as MetricsPanelCtrl };
