System.register(["lodash"], function (exports_1, context_1) {
    "use strict";
    var lodash_1;
    var __moduleName = context_1 && context_1.id;
    function GetDecimalsForValue(value, panelDecimals) {
        if (lodash_1.default.isNumber(panelDecimals)) {
            return { decimals: panelDecimals, scaledDecimals: null };
        }
        var delta = value / 2;
        var dec = -Math.floor(Math.log(delta) / Math.LN10);
        var magn = Math.pow(10, -dec), norm = delta / magn, size;
        if (norm < 1.5) {
            size = 1;
        }
        else if (norm < 3) {
            size = 2;
            if (norm > 2.25) {
                size = 2.5;
                ++dec;
            }
        }
        else if (norm < 7.5) {
            size = 5;
        }
        else {
            size = 10;
        }
        size *= magn;
        if (Math.floor(value) === value) {
            dec = 0;
        }
        var result = {
            decimals: 0,
            scaledDecimals: 0,
        };
        result.decimals = Math.max(0, dec);
        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;
        return result;
    }
    exports_1("GetDecimalsForValue", GetDecimalsForValue);
    function getTextSizeForWidth(text, font, width, minFontPx, maxFontPx) {
        var s = font.replace("?", maxFontPx);
        var w = getTextWidth(text, s);
        if (w <= width) {
            return maxFontPx;
        }
        width = width - 20;
        for (var fontSize = maxFontPx; fontSize >= minFontPx; fontSize--) {
            s = font.replace("?", fontSize);
            w = getTextWidth(text, s);
            if (w < width) {
                return Math.ceil(fontSize);
            }
        }
        return 0;
    }
    exports_1("getTextSizeForWidth", getTextSizeForWidth);
    function getTextWidth(text, font) {
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        context.font = font;
        var metrics = context.measureText(text);
        return metrics.width;
    }
    exports_1("getTextWidth", getTextWidth);
    return {
        setters: [
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            }
        ],
        execute: function () {
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztJQU1BLDZCQUE2QixLQUFVLEVBQUUsYUFBa0I7UUFDekQsSUFBSSxnQkFBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUM3QixPQUFPLEVBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUN6QixJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksRUFDbkIsSUFBSSxDQUFDO1FBRVQsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ2QsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNWO2FBQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLElBQUksR0FBRyxDQUFDLENBQUM7WUFFVCxJQUFJLElBQUksR0FBRyxJQUFJLEVBQUU7Z0JBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQztnQkFDWCxFQUFFLEdBQUcsQ0FBQzthQUNQO1NBQ0Y7YUFBTSxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDckIsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNWO2FBQU07WUFDTCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1g7UUFFRCxJQUFJLElBQUksSUFBSSxDQUFDO1FBR2IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FBRTtRQUU3QyxJQUFJLE1BQU0sR0FBRztZQUNYLFFBQVEsRUFBRSxDQUFDO1lBQ1gsY0FBYyxFQUFFLENBQUM7U0FDbEIsQ0FBQztRQUNGLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JGLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0lBY0QsNkJBQTZCLElBQVksRUFBRSxJQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTO1FBQzdFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFO1lBQ2QsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxLQUFLLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUVuQixLQUFLLElBQUksUUFBUSxHQUFHLFNBQVMsRUFBRSxRQUFRLElBQUksU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2hFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNoQyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUU7Z0JBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzVCO1NBQ0Y7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7O0lBVUQsc0JBQXNCLElBQVksRUFBRSxJQUFZO1FBRTlDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vLy88cmVmZXJlbmNlIHBhdGg9XCIuLi9ub2RlX21vZHVsZXMvQHR5cGVzL2xvZGFzaC9pbmRleC5kLnRzXCIgLz5cblxuLy8gaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG4vL2ltcG9ydCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxuZnVuY3Rpb24gR2V0RGVjaW1hbHNGb3JWYWx1ZSh2YWx1ZTogYW55LCBwYW5lbERlY2ltYWxzOiBhbnkpOiB7IGRlY2ltYWxzOyBzY2FsZWREZWNpbWFsczsgfSB7XG4gIGlmIChfLmlzTnVtYmVyKHBhbmVsRGVjaW1hbHMpKSB7XG4gICAgcmV0dXJuIHtkZWNpbWFsczogcGFuZWxEZWNpbWFscywgc2NhbGVkRGVjaW1hbHM6IG51bGx9O1xuICB9XG5cbiAgdmFyIGRlbHRhID0gdmFsdWUgLyAyO1xuICB2YXIgZGVjID0gLU1hdGguZmxvb3IoTWF0aC5sb2coZGVsdGEpIC8gTWF0aC5MTjEwKTtcblxuICB2YXIgbWFnbiA9IE1hdGgucG93KDEwLCAtZGVjKSxcbiAgICAgIG5vcm0gPSBkZWx0YSAvIG1hZ24sIC8vIG5vcm0gaXMgYmV0d2VlbiAxLjAgYW5kIDEwLjBcbiAgICAgIHNpemU7XG5cbiAgaWYgKG5vcm0gPCAxLjUpIHtcbiAgICBzaXplID0gMTtcbiAgfSBlbHNlIGlmIChub3JtIDwgMykge1xuICAgIHNpemUgPSAyO1xuICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgMi41LCByZXF1aXJlcyBhbiBleHRyYSBkZWNpbWFsXG4gICAgaWYgKG5vcm0gPiAyLjI1KSB7XG4gICAgICBzaXplID0gMi41O1xuICAgICAgKytkZWM7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vcm0gPCA3LjUpIHtcbiAgICBzaXplID0gNTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gMTA7XG4gIH1cblxuICBzaXplICo9IG1hZ247XG5cbiAgLy8gcmVkdWNlIHN0YXJ0aW5nIGRlY2ltYWxzIGlmIG5vdCBuZWVkZWRcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSkgeyBkZWMgPSAwOyB9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBkZWNpbWFsczogMCxcbiAgICBzY2FsZWREZWNpbWFsczogMCxcbiAgfTtcbiAgcmVzdWx0LmRlY2ltYWxzID0gTWF0aC5tYXgoMCwgZGVjKTtcbiAgcmVzdWx0LnNjYWxlZERlY2ltYWxzID0gcmVzdWx0LmRlY2ltYWxzIC0gTWF0aC5mbG9vcihNYXRoLmxvZyhzaXplKSAvIE1hdGguTE4xMCkgKyAyO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqXG4gKlxuICogRmluZCB0aGUgbGFyZ2VzdCBmb250IHNpemUgKGluIHBpeGVscykgdGhhdCBhbGxvd3MgdGhlIHN0cmluZyB0byBmaXQgaW4gdGhlIGdpdmVuIHdpZHRoLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIGJlIHJlbmRlcmVkLlxuICogQHBhcmFtIHtTdHJpbmd9IGZvbnQgVGhlIGNzcyBmb250IGRlc2NyaXB0b3IgdGhhdCB0ZXh0IGlzIHRvIGJlIHJlbmRlcmVkIHdpdGggKGUuZy4gXCJib2xkID9weCB2ZXJkYW5hXCIpXG4gKiAgICAgICAgICAgICAgICAgICAgICAtLSBub3RlIHRoZSB1c2Ugb2YgPyBpbiBwbGFjZSBvZiB0aGUgZm9udCBzaXplLlxuICogQHBhcmFtIHt3aWR0aH0gdGhlIHdpZHRoIGluIHBpeGVscyB0aGUgc3RyaW5nIG11c3QgZml0IGluXG4gKiBAcGFyYW0ge21pbkZvbnRQeH0gdGhlIHNtYWxsZXN0IGFjY2VwdGFibGUgZm9udCBzaXplIGluIHBpeGVsc1xuICogQHBhcmFtIHttYXhGb250UHh9IHRoZSBsYXJnZXN0IGFjY2VwdGFibGUgZm9udCBzaXplIGluIHBpeGVsc1xuKiovXG5mdW5jdGlvbiBnZXRUZXh0U2l6ZUZvcldpZHRoKHRleHQ6IHN0cmluZywgZm9udDogYW55LCB3aWR0aCwgbWluRm9udFB4LCBtYXhGb250UHgpIHtcbiAgICB2YXIgcyA9IGZvbnQucmVwbGFjZShcIj9cIiwgbWF4Rm9udFB4KTtcbiAgICB2YXIgdyA9IGdldFRleHRXaWR0aCh0ZXh0LCBzKTtcbiAgICBpZiAodyA8PSB3aWR0aCkge1xuICAgICAgcmV0dXJuIG1heEZvbnRQeDtcbiAgICB9XG4gICAgLy8gcGFkIHdpZHRoIGJ5IDEwcHhcbiAgICB3aWR0aCA9IHdpZHRoIC0gMjA7XG4gICAgLy8gc3RhcnQgZnJvbSBsYXJnZSB0byBzbWFsbCwgcmV0dXJuIDAgZm9yIG5vLWZpdFxuICAgIGZvciAobGV0IGZvbnRTaXplID0gbWF4Rm9udFB4OyBmb250U2l6ZSA+PSBtaW5Gb250UHg7IGZvbnRTaXplLS0pIHtcbiAgICAgIHMgPSBmb250LnJlcGxhY2UoXCI/XCIsIGZvbnRTaXplKTtcbiAgICAgIHcgPSBnZXRUZXh0V2lkdGgodGV4dCwgcyk7XG4gICAgICBpZiAodyA8IHdpZHRoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoZm9udFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyAwIGlmIG5vIGZpdFxuICAgIHJldHVybiAwO1xufVxuXG4vKipcbiAqIFVzZXMgY2FudmFzLm1lYXN1cmVUZXh0IHRvIGNvbXB1dGUgYW5kIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIGdpdmVuIHRleHQgb2YgZ2l2ZW4gZm9udCBpbiBwaXhlbHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gYmUgcmVuZGVyZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9udCBUaGUgY3NzIGZvbnQgZGVzY3JpcHRvciB0aGF0IHRleHQgaXMgdG8gYmUgcmVuZGVyZWQgd2l0aCAoZS5nLiBcImJvbGQgMTRweCB2ZXJkYW5hXCIpLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE4MjQxL2NhbGN1bGF0ZS10ZXh0LXdpZHRoLXdpdGgtamF2YXNjcmlwdC8yMTAxNTM5MyMyMTAxNTM5M1xuICovXG5mdW5jdGlvbiBnZXRUZXh0V2lkdGgodGV4dDogc3RyaW5nLCBmb250OiBzdHJpbmcpIHtcbiAgLy8gcmUtdXNlIGNhbnZhcyBvYmplY3QgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICBjb250ZXh0LmZvbnQgPSBmb250O1xuICB2YXIgbWV0cmljcyA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gIHJldHVybiBtZXRyaWNzLndpZHRoO1xufVxuXG5cbmV4cG9ydCB7XG5HZXREZWNpbWFsc0ZvclZhbHVlLFxuZ2V0VGV4dFNpemVGb3JXaWR0aCxcbmdldFRleHRXaWR0aFxufTtcbiJdfQ==